mean_y = mean_y + delta_y / n
Cxy = Cxy + delta_x * (y - mean_y)
M2_y = M2_y + delta_y * (y - mean_y)
c = if (n > 1 && M2_y > 0) -Cxy / M2_y else 0
cv = x + c * (y - mean_y)
delta_cv = cv - mean_cv
mean_cv = mean_cv + delta_cv / n
M2_cv = M2_cv + delta_cv * (cv - mean_cv)
if (n > 1) {
S = sqrt(M2_cv / (n - 1))
if (S == 0) next
ci_len = 2 * z975 * S / sqrt(n)
if (ci_len < target_len) break
}
}
return(list(n = n, pi_est = 4 * mean_cv, var_pi = 16 * M2_cv / (n - 1)))
}
# 方法三：Conditioning
conditioning_func = function() {
u = runif(1)
return(sqrt(1 - u^2))
}
# 方法四：Conditioning + Antithetic
simulate_until_ci_cond_anti = function() {
n = 0
mean_x = 0
M2 = 0
repeat {
u = runif(1)
v = 1 - u
x = (sqrt(1 - u^2) + sqrt(1 - v^2)) / 2
n = n + 1
delta = x - mean_x
mean_x = mean_x + delta / n
M2 = M2 + delta * (x - mean_x)
if (n > 1) {
S = sqrt(M2 / (n - 1))
if (S == 0) next
ci_len = 2 * z975 * S / sqrt(n)
if (ci_len < target_len) break
}
}
return(list(n = n, pi_est = 4 * mean_x, var_pi = 16 * M2 / (n - 1)))
}
# 執行所有模擬
res_anti = simulate_until_ci(antithetic_func)
res_ctrl_1 = simulate_until_ci_control_1()
res_ctrl_2 = simulate_until_ci_control_2()
res_cond = simulate_until_ci(conditioning_func)
res_cond_anti = simulate_until_ci_cond_anti()
# 輸出（含變異數）
print(res_anti$n)
print(res_anti$pi_est)
print(res_anti$var_pi)
print(res_ctrl_1$n)
print(res_ctrl_1$pi_est)
print(res_ctrl_1$var_pi)
print(res_ctrl_2$n)
print(res_ctrl_2$pi_est)
print(res_ctrl_2$var_pi)
print(res_cond$n)
print(res_cond$pi_est)
print(res_cond$var_pi)
print(res_cond_anti$n)
print(res_cond_anti$pi_est)
print(res_cond_anti$var_pi)
#5-4
n_list = c(5, 10, 100, 500, 1000, 5000)
true_pi = pi
h = function(u) {
sqrt(1 - u^2)
}
# MC
estimate_conditioning = function(n) {
U = runif(n)
theta = mean(h(U))
return(4 * theta)
}
# 2
estimate_stratified = function(n) {
U = runif(n)
U_strat = (U + (0:(n - 1))) / n
theta = mean(h(U_strat))
return(4 * theta)
}
# 3
estimate_stratified_antithetic = function(n) {
U = runif(n)
U1 = (U + (0:(n - 1))) / n
U2 = ((1 - U) + (0:(n - 1))) / n
theta = mean((h(U1) + h(U2)) / 2)
return(4 * theta)
}
results = data.frame(
n = n_list,
conditioning = NA,
stratified = NA,
strat_anti = NA
)
for (i in seq_along(n_list)) {
n = n_list[i]
results$conditioning[i] = estimate_conditioning(n)
results$stratified[i] = estimate_stratified(n)
results$strat_anti[i] = estimate_stratified_antithetic(n)
}
print(results)
X = c(10, 11, 10.5, 11.5, 14, 8, 13, 6, 15, 10, 11.5, 10.5, 12, 8, 16, 5)
s = sd(X)
n_required = ceiling((s / 0.1)^2)
extra_needed = n_required - length(X)
print(paste("Total n required:", n_required))
print(paste("Additional needed:", extra_needed))
x = c(1, 3)
samples = expand.grid(x, x)  # 所有2次有放回組合
boot_vars = apply(samples, 1, function(row) var(c(row[1], row[2])))
var_S2 = var(boot_vars)
print(boot_vars)  # 所有 S² 值
print(var_S2)     # 精確的 bootstrap 估計 Var(S²)
x = c(1, 3)
samples = expand.grid(x, x)  # 所有2次有放回組合
boot_vars = apply(samples, 1, function(row) var(c(row[1], row[2])))
mean_var = mean(boot_vars)
var_S2_true = mean((boot_vars - mean_var)^2)
print(var_S2_true)
#14
x = c(1, 3)
samples = expand.grid(x, x)  # 所有可能的有放回抽樣（2^2 = 4 種）
boot_vars = apply(samples, 1, function(row) var(c(row[1], row[2])))
# 自己算母體變異數（分母 = 4）
mean_var = mean(boot_vars)
var_S2_true = mean((boot_vars - mean_var)^2)
# 輸出
print("所有可能的 S² 值：")
print(boot_vars)
print("平均 S²：")
print(mean_var)
print("母體變異數 Var(S²)：")
print(var_S2_true)
library(ISLR)
install.packages(ISLR)
install.packages("ISLR")
library(ISLR)
salary= na.omit(Hitter$Salary)
library(ISLR)
salary= na.omit(Hitters$Salary)
salary
set.seed(42)
n = 100000
U = runif(n)
X = sqrt(1 - U^2)    # 目標變數
Y1 = U               # 控制變數 1
Y2 = U^2             # 控制變數 2
# 比較相關係數
cor_X_Y1 = cor(X, Y1)
cor_X_Y2 = cor(X, Y2)
print(paste("cor(X, U):", round(cor_X_Y1, 4)))
print(paste("cor(X, U^2):", round(cor_X_Y2, 4)))
# 估計目標：theta = E[X]
theta_hat = mean(X)
# 控制變數：Z = X + c(Y - EY)
# 使用 U 做控制變數
EY1 = 0.5
c1 = -cov(X, Y1) / var(Y1)
Z1 = X + c1 * (Y1 - EY1)
# 使用 U^2 做控制變數
EY2 = 1/3
c2 = -cov(X, Y2) / var(Y2)
Z2 = X + c2 * (Y2 - EY2)
# 比較三種方法的方差
var_X  = var(X)
var_Z1 = var(Z1)
var_Z2 = var(Z2)
print(paste("Var (no control):", round(var_X, 6)))
print(paste("Var with U:", round(var_Z1, 6)))
print(paste("Var with U^2:", round(var_Z2, 6)))
6^6
##3
x = c(5, 8, 9,10,12,17)
n = length(x)
samples <- as.matrix(expand.grid(x, x, x))
boot_mean   = rowMeans(samples)
boot_median = apply(samples, 1, median)
boot_var = apply(samples, 1, function(v) {
m = mean(v)
sum((v - m)^2) / n
})
orig_mean   = mean(x)
orig_median = median(x)
orig_var    = var(x)
mse_mean    = mean((boot_mean   - orig_mean)^2)
var_mean    = mean((boot_mean   - mean(boot_mean))^2)
var_median  = mean((boot_median - mean(boot_median))^2)
mse_median  = mean((boot_median - orig_median)^2)
var_var     = mean((boot_var    - mean(boot_var))^2)
print(mse_mean)
print(var_mean)
print(var_median)
print(var_var)
boot_var
boot_median
X = c(56, 101, 78, 67, 93, 87, 64, 72, 80, 69, 11, -5)
n = length(X)
mu_hat = mean(X)  # 原始樣本平均
B = 10000  # Bootstrap 次數
boot_means = replicate(B, mean(sample(X, size = n, replace = TRUE)))
# 差異：boot_mean - 原始平均
diffs = boot_means - mu_hat
# 計算 P(-5 < diff < 5)
p_hat = mean(diffs > -5 & diffs < 5)
print(p_hat)
set.seed(42)
X = c(56, 101, 78, 67, 93, 87, 64, 72, 80, 69, 11, -5)
n = length(X)
mu_hat = mean(X)
B = 10000
boot_means = replicate(B, mean(sample(X, size = n, replace = TRUE)))
# Approximate Pr(-5 < X̄ - μ < 5)
# == Pr( -5 < boot_mean - original_mean < 5 )
p_hat = mean(abs(boot_means - mu_hat) < 5)
print(p_hat)
12^12
library(ISLR)
salary= na.omit(Hitters$Salary)
salary
set.seed(123)
B = 10000
salary = na.omit(ISLR::Hitters$Salary)
n = length(salary)
boot_medians = replicate(B, median(sample(salary, size = n, replace = TRUE)))
# 95% percentile bootstrap confidence interval
ci_boot = quantile(boot_medians, c(0.025, 0.975))
print(ci_boot)
B = 10000
salary = na.omit(ISLR::Hitters$Salary)
n = length(salary)
boot_medians = replicate(B, median(sample(salary, size = n, replace = TRUE)))
# 95% percentile bootstrap confidence interval
ci_boot = quantile(boot_medians, c(0.025, 0.975))
print(ci_boot)
n = 100000
Z1 = rnorm(n)
Z2 = rnorm(n)
X = Z1 + Z2
I = as.numeric(X > -1 & X < 1)
p_hat_MC = mean(I)
p_hat_MC
I
X
Z1 = rnorm(n)
p_hat_cond = mean(pnorm(1 - Z1) - pnorm(-1 - Z1))
# MC estimator
I = as.numeric((Z1 + Z2) > -1 & (Z1 + Z2) < 1)
p_hat_MC = mean(I)
# Conditioning estimator
cond_vals = pnorm(1 - Z1) - pnorm(-1 - Z1)
p_hat_cond = mean(cond_vals)
# Variance estimates
var_MC = var(I) / n
var_cond = var(cond_vals) / n
# Reduction ratio
reduction = (var_MC - var_cond) / var_MC
reduction
p_hat_cond
z975 = qnorm(0.975)
required_n = function(var_est) {
ceiling((2 * z975 * sqrt(var_est) / 0.001)^2)
}
n_MC_needed = required_n(var_MC)
n_cond_needed = required_n(var_cond)
n_MC_needed
n_cond_needed
x = c(5, 8, 9, 10, 12, 17)
n = length(x)
# 列出所有帶放回的樣本大小為6的可能組合（6^6 = 46656）
samples <- as.matrix(expand.grid(x, x, x, x, x, x))
B = nrow(samples)  # 46656
# 每組樣本的 median
boot_medians = apply(samples, 1, median)
# 原始樣本 median
theta_hat = median(x)
# bootstrap mean of medians
boot_mean = mean(boot_medians)
# Bias
bias = boot_mean - theta_hat
# Variance（分母 = B）
variance = sum((boot_medians - boot_mean)^2) / B
# MSE（分母 = B）
mse = sum((boot_medians - theta_hat)^2) / B
# 輸出
print(bias)
print(variance)
print(mse)
z975 = qnorm(0.975)
target_width = 0.03
p = 0.5
n_required = ceiling((2 * z975)^2 * p * (1 - p) / (target_width^2))
print(n_required)
set.seed(123)
z975 = qnorm(0.975)
target_ci_width = 0.03
p = 0.5
simulate_antithetic = function(n, a = 0.5) {
# 原始 binary 回答
X = rbinom(n, 1, p)
# U ~ Uniform(0,1)
U = runif(n)
Y = ifelse(runif(n) < 0.5, X, as.numeric(U < 0.5))
theta = a * X + (1 - a) * Y
se = sd(theta) / sqrt(n)
ci_width = 2 * z975 * se
return(list(mean = mean(theta), ci_width = ci_width, se = se, n = n))
}
# 不斷增加樣本數直到符合 CI 寬度條件
n = 100
repeat {
res = simulate_antithetic(n, a = 0.5)
if (res$ci_width < target_ci_width) break
n = n + 10
}
print(res)
#7
z975 = qnorm(0.975)
target_width = 0.03
p = 0.5
n_required = ceiling((2 * z975)^2 * p * (1 - p) / (target_width^2))
print(n_required)
#b
z975 = qnorm(0.975)
target_ci_width = 0.03
p = 0.5
simulate_antithetic = function(n, a = 0.5) {
# 原始 binary 回答
X = rbinom(n, 1, p)
# U ~ Uniform(0,1)
U = runif(n)
Y = ifelse(runif(n) < 0.5, X, as.numeric(U < 0.5))
theta = a * X + (1 - a) * Y
se = sd(theta) / sqrt(n)
ci_width = 2 * z975 * se
return(list(mean = mean(theta), ci_width = ci_width, se = se, n = n))
}
n = 100
repeat {
res = simulate_antithetic(n, a = 0.5)
if (res$ci_width < target_ci_width) break
n = n + 10
}
print(res)
# 設定母體分層資訊
w1 = 0.25  # stratum 1 的比例
w2 = 0.75  # stratum 2 的比例
p1 = 0.8   # stratum 1 的支持率
p2 = 0.4   # stratum 2 的支持率
# Overall support rate
p_bar = w1 * p1 + w2 * p2
# Var of SRS estimator (p_bar known)
var_srs = p_bar * (1 - p_bar)  # 除以 n 可省略，因為是比例比較
# Var of stratified estimator
var_strat = w1^2 * p1 * (1 - p1) + w2^2 * p2 * (1 - p2)
# Reduction ratio
reduction = (var_srs - var_strat) / var_srs * 100
reduction
reduction = (var_srs - var_strat) / var_srs
reduction
X = c(56, 101, 78, 67, 93, 87, 64, 72, 80, 69, 11, -5)
n = length(X)
mu_hat = mean(X)
B = 10000
boot_means = replicate(B, mean(sample(X, size = n, replace = TRUE)))
# Approximate Pr(-5 < X̄ - μ < 5)
# == Pr( -5 < boot_mean - original_mean < 5 )
p_hat = mean(abs(boot_means - mu_hat) < 5)
print(p_hat)
B = 10000
salary = na.omit(ISLR::Hitters$Salary)
n = length(salary)
boot_medians = replicate(B, median(sample(salary, size = n, replace = TRUE)))
# 95% percentile bootstrap confidence interval
ci_boot = quantile(boot_medians, c(0.025, 0.975))
print(ci_boot)
# MC estimator
I = as.numeric((Z1 + Z2) > -1 & (Z1 + Z2) < 1)
p_hat_MC = mean(I)
# Conditioning estimator
cond_vals = pnorm(1 - Z1) - pnorm(-1 - Z1)
p_hat_cond = mean(cond_vals)
# Variance estimates
var_MC = var(I) / n
var_cond = var(cond_vals) / n
p_hat_MC
p_hat_cond
#5
n = 100000
Z1 = rnorm(n)
Z2 = rnorm(n)
X = Z1 + Z2
I = as.numeric(X > -1 & X < 1)
p_hat_MC = mean(I)
#(b)
Z1 = rnorm(n)
p_hat_cond = mean(pnorm(1 - Z1) - pnorm(-1 - Z1))
#(c)
# MC estimator
I = as.numeric((Z1 + Z2) > -1 & (Z1 + Z2) < 1)
p_hat_MC = mean(I)
# Conditioning estimator
cond_vals = pnorm(1 - Z1) - pnorm(-1 - Z1)
p_hat_cond = mean(cond_vals)
# Variance estimates
var_MC = var(I) / n
var_cond = var(cond_vals) / n
p_hat_MC
var_cond
p_hat_MC
p_hat_cond
z975 = qnorm(0.975)
required_n = function(var_est) {
ceiling((2 * z975 * sqrt(var_est) / 0.001)^2)
}
n_MC_needed = required_n(var_MC)
n_cond_needed = required_n(var_cond)
n_cond_needed
n_MC_needed
B
B = nrow(samples)
B
#6
x = c(5, 8, 9, 10, 12, 17)
n = length(x)
# 列出所有帶放回的樣本大小為6的可能組合（6^6 = 46656）
samples <- as.matrix(expand.grid(x, x, x, x, x, x))
B = nrow(samples)  # 46656
# 每組樣本的 median
boot_medians = apply(samples, 1, median)
# 原始樣本 median
theta_hat = median(x)
# bootstrap mean of medians
boot_mean = mean(boot_medians)
# Bias
bias = boot_mean - theta_hat
# Variance（分母 = B）
variance = sum((boot_medians - boot_mean)^2) / B
# MSE（分母 = B）
mse = sum((boot_medians - theta_hat)^2) / B
# 輸出
print(bias)
print(variance)
print(mse)
B
#7
z975 = qnorm(0.975)
target_width = 0.03
p = 0.5
n_required = ceiling((2 * z975)^2 * p * (1 - p) / (target_width^2))
print(n_required)
#b
z975 = qnorm(0.975)
target_ci_width = 0.03
p = 0.5
simulate_antithetic = function(n, a = 0.5) {
# 原始 binary 回答
X = rbinom(n, 1, p)
# U ~ Uniform(0,1)
U = runif(n)
Y = ifelse(runif(n) < 0.5, X, as.numeric(U < 0.5))
theta = a * X + (1 - a) * Y
se = sd(theta) / sqrt(n)
ci_width = 2 * z975 * se
return(list(mean = mean(theta), ci_width = ci_width, se = se, n = n))
}
n = 100
repeat {
res = simulate_antithetic(n, a = 0.5)
if (res$ci_width < target_ci_width) break
n = n + 10
}
print(res)
#c
# 設定母體分層資訊
w1 = 0.25  # stratum 1 的比例
w2 = 0.75  # stratum 2 的比例
p1 = 0.8   # stratum 1 的支持率
p2 = 0.4   # stratum 2 的支持率
# Overall support rate
p_bar = w1 * p1 + w2 * p2
# Var of SRS estimator (p_bar known)
var_srs = p_bar * (1 - p_bar)  # 除以 n 可省略，因為是比例比較
# Var of stratified estimator
var_strat = w1^2 * p1 * (1 - p1) + w2^2 * p2 * (1 - p2)
# Reduction ratio
reduction = (var_srs - var_strat) / var_srs
reduction
#3
X = c(56, 101, 78, 67, 93, 87, 64, 72, 80, 69, 11, -5)
n = length(X)
mu_hat = mean(X)
B = 10000
boot_means = replicate(B, mean(sample(X, size = n, replace = TRUE)))
# Approximate Pr(-5 < X̄ - μ < 5)
# == Pr( -5 < boot_mean - original_mean < 5 )
p_hat = mean(abs(boot_means - mu_hat) < 5)
print(p_hat)
X = c(56, 101, 78, 67, 93, 87, 64, 72, 80, 69)
n = length(X)
mu_hat = mean(X)
B = 10000
a = -5
b = 5
boot_means = replicate(B, mean(sample(X, size = n, replace = TRUE)))
diffs = boot_means - mu_hat
p_hat = mean(diffs > a & diffs < b)
print(p_hat)
